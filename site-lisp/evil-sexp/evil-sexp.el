(defun evil-sexp-enter ()
  (interactive)
  (cond ((and (= (char-after (point)) ?\()
              (= (char-after (1+ (point))) ?\n))
         (forward-char 2))
        ((= (char-after (point)) ?\()
         (forward-char))
        ((= (char-after (point)) ?\))
         (backward-char))
        ))

(define-key evil-motion-state-map (kbd "M-j") 'evil-sexp-enter)
(define-key evil-motion-state-map (kbd "M-k") 'backward-up-list)
(define-key evil-motion-state-map (kbd "M-h") '(lambda ()
                                                 (interactive)
                                                 (cond ((eq (char-after (point)) ?\))
                                                        (forward-char) (backward-sexp))
                                                       (t (backward-sexp)))))
(define-key evil-motion-state-map (kbd "M-l") (lambda ()
                                                (interactive)
                                                (unless (= (char-after (point)) ?\()
                                                  (forward-char))
                                                (forward-sexp)
                                                (backward-char)))
