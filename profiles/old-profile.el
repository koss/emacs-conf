;;; Add elisp root directory to load-path

(setq sm-unmanaged-profile t)
(setq py-python-command "ipython")
(setq *job* t)
(setq *more-agenda-files* '("~/src/myphdcode/dmlib.org"))
(setq *my-dropbox-dir* "~/Dropbox")
;;(setq *git-emacs-files-dir* "/usr/share/doc/git/contrib/emacs/")
;;(setq *ruby-emacs-files-dir* "~/.rvm/src/ruby-1.9.2-p136/misc/")
(setq *path-to-quicklisp-slime-helper* (expand-file-name "~/quicklisp/slime-helper.el"))



;;; Customize output
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Info-additional-directory-list (quote ("/home/ale/Dropbox/emacs/info")))
 '(TeX-PDF-mode t)
 '(c-default-style (quote ((c-mode . "hri") (c++-mode . "ellemtel") (java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
 '(company-idle-delay nil)
 '(custom-enabled-themes (quote (ale-black)))
 '(custom-safe-themes (quote ("7f96e6a6dd9b02aeae63cde2916f2725eaf91b44049cdc9cf608ceff4c2a3732" "937192841e98d0260e5d2f24c5937136ea2ef5b9f5dcf79937a927da7fd07d9a" "c10c5633b72da0ab27ef6078173e950c770feee9ec755a4ef4b54b711647b637" "6ce86d5929771a629df54a073ad652a480be17cd7f75b76a61ad7be84b3766c8" default)))
 '(diff-switches "-u")
 '(eclim-auto-save t)
 '(eclim-eclipse-dirs (quote ("/Applications/eclipse" "/usr/lib/eclipse" "/usr/local/lib/eclipse" "/usr/share/eclipse" "/data/alessandro/eclipse")))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(enotify-espectator-use-alert t)
 '(enotify-use-next-available-port t)
 '(erc-beep-match-types (quote (current-nick keyword)))
 '(erc-keywords (quote ("enotify" "evil")))
 '(evil-default-cursor (quote (t "#CC00CC")))
 '(evil-emacs-state-modes (quote (eassist-mode archive-mode bbdb-mode bookmark-bmenu-mode bookmark-edit-annotation-mode browse-kill-ring-mode bzr-annotate-mode calc-mode cfw:calendar-mode completion-list-mode Custom-mode debugger-mode delicious-search-mode desktop-menu-blist-mode desktop-menu-mode doc-view-mode dvc-bookmarks-mode dvc-diff-mode dvc-info-buffer-mode dvc-log-buffer-mode dvc-revlist-mode dvc-revlog-mode dvc-status-mode dvc-tips-mode ediff-mode efs-mode Electric-buffer-menu-mode emms-browser-mode emms-mark-mode emms-metaplaylist-mode emms-playlist-mode ert-results-mode etags-select-mode fj-mode gc-issues-mode gdb-breakpoints-mode gdb-disassembly-mode gdb-frames-mode gdb-locals-mode gdb-memory-mode gdb-registers-mode gdb-threads-mode gist-list-mode gnus-article-mode gnus-browse-mode gnus-group-mode gnus-server-mode gnus-summary-mode google-maps-static-mode ibuffer-mode jde-javadoc-checker-report-mode magit-commit-mode magit-diff-mode magit-key-mode magit-log-mode magit-mode magit-reflog-mode magit-show-branches-mode magit-stash-mode magit-status-mode magit-wazzup-mode mh-folder-mode monky-mode notmuch-hello-mode notmuch-search-mode notmuch-show-mode occur-mode org-agenda-mode package-menu-mode proced-mode rcirc-mode rebase-mode recentf-dialog-mode reftex-select-bib-mode reftex-toc-mode sldb-mode slime-inspector-mode slime-thread-control-mode slime-xref-mode sr-buttons-mode sr-mode sr-tree-mode sr-virtual-mode tar-mode tetris-mode tla-annotate-mode tla-archive-list-mode tla-bconfig-mode tla-bookmarks-mode tla-branch-list-mode tla-browse-mode tla-category-list-mode tla-changelog-mode tla-follow-symlinks-mode tla-inventory-file-mode tla-inventory-mode tla-lint-mode tla-logs-mode tla-revision-list-mode tla-revlog-mode tla-tree-lint-mode tla-version-list-mode twittering-mode urlview-mode vc-annotate-mode vc-dir-mode vc-git-log-view-mode vc-svn-log-view-mode vm-mode vm-summary-mode w3m-mode wab-compilation-mode xgit-annotate-mode xgit-changelog-mode xgit-diff-mode xgit-revlog-mode xhg-annotate-mode xhg-log-mode xhg-mode xhg-mq-mode xhg-mq-sub-mode xhg-status-extra-mode eclim-project-mode eclim-problems-mode)))
 '(evil-want-C-w-in-emacs-state t)
 '(geiser-default-implementation (quote racket))
 '(geiser-racket-collects (quote ("/home/ale/tmp" "/usr/share/racket/collects")))
 '(global-hl-line-mode nil)
 '(gnus-article-sort-functions (quote (gnus-article-sort-by-number)))
 '(gnus-message-replysign t)
 '(gnus-thread-sort-functions (quote (gnus-thread-sort-by-most-recent-date)))
 '(indent-tabs-mode nil)
 '(indicate-empty-lines t)
 '(inhibit-startup-screen nil)
 '(initial-buffer-choice t)
 '(js2-auto-indent-p t)
 '(js2-basic-offset 2)
 '(js2-electric-keys (quote ("{" "}" "(" ")" "[" "]" ":" ";" "," "*")))
 '(js2-enter-indents-newline t)
 '(js2-highlight-level 3)
 '(js2-indent-on-enter-key t)
 '(js2-mirror-mode nil)
 '(org-agenda-files (quote ("~/Dropbox/Agendas/general.org" "~/Dropbox/Agendas/agenda.org" "~/Dropbox/Agendas/abitudini.org")))
 '(org-habit-show-habits-only-for-today nil)
 '(org-src-fontify-natively t)
 '(py-python-command-args (quote ("-i" "--colors" "LightBG")))
 '(py-temp-directory "/tmp")
 '(python-indent-offset 4)
 '(quack-default-program "racket")
 '(quack-pretty-lambda-p t)
 '(semantic-default-submodes (quote (global-semantic-highlight-func-mode global-semantic-stickyfunc-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-show-unmatched-syntax-mode)))
 '(send-mail-function (quote smtpmail-send-it))
 '(show-paren-mode t)
 '(smtpmail-smtp-server "mail.tekno-soft.it")
 '(smtpmail-smtp-service 25)
 '(sql-sqlite-program "sqlite3")
 '(toggle-mapping-style (quote rspec))
 '(tool-bar-mode nil)
 '(user-full-name "Alessandro Piras")
 '(user-mail-address "laynor@gmail.com")
 '(viper-emacs-state-mode-list (quote (Custom-mode efs-mode tar-mode browse-kill-ring-mode recentf-mode recentf-dialog-mode occur-mode mh-folder-mode gnus-group-mode gnus-summary-mode completion-list-mode Info-mode compilation-mode rcirc-mode jde-javadoc-checker-report-mode view-mode vm-mode vm-summary-mode inferior-moz-mode)))
 '(viper-ex-style-editing nil)
 '(w3m-symbol (quote w3m-mule-unicode-symbol))
 '(w3m-use-symbol t)
 '(warning-minimum-log-level :error))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 80 :width normal :family "terminus"))))
 '(bold ((t (:weight bold))))
 '(bow ((t (:inherit nil :background "gray80" :foreground "black"))) t)
 '(cursor ((t (:background "#CC00CC"))))
 '(eldoc-highlight-function-argument ((t (:inherit bold :box (:line-width 2 :color "magenta1" :style released-button)))))
 '(erc-keyword-face ((t (:foreground "magenta" :weight bold))))
 '(error ((t (:foreground "Red" :weight bold))))
 '(flymake-errline ((((class color)) (:underline "red"))))
 '(flymake-warnline ((((class color)) (:underline "yellow"))))
 '(font-lock-builtin-face ((t (:foreground "medium slate blue"))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "MediumPurple2"))))
 '(font-lock-comment-face ((t (:foreground "MediumPurple3"))))
 '(font-lock-constant-face ((t (:foreground "#ff0022"))))
 '(font-lock-doc-face ((t (:inherit font-lock-string-face :foreground "purple3"))))
 '(font-lock-fic-face ((((class color)) (:background "Red" :foreground "Yellow" :weight bold))))
 '(font-lock-function-name-face ((t (:foreground "deeppink" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "dodger blue" :weight bold))))
 '(font-lock-preprocessor-face ((t (:inherit font-lock-builtin-face :foreground "yellow"))))
 '(font-lock-regexp-grouping-backslash ((t (:inherit bold :foreground "dark slate grey"))))
 '(font-lock-regexp-grouping-construct ((t (:inherit bold :foreground "steel blue"))))
 '(font-lock-type-face ((t (:foreground "spring green" :weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "forest green" :weight bold))))
 '(geiser-font-lock-autodoc-current-arg ((t (:background "dim gray" :weight bold))) t)
 '(hl-line ((t (:background "grey13"))))
 '(hri-macros-face ((t (:foreground "dark slate blue"))))
 '(ido-first-match ((t (:slant italic :weight bold))))
 '(ido-subdir ((t (:foreground "Dodgerblue"))))
 '(info-header-node ((t (:inherit info-node :foreground "gold"))))
 '(info-header-xref ((t (:inherit info-xref :foreground "yellow"))))
 '(info-menu-header ((t (:inherit variable-pitch :foreground "DodgerBlue1" :weight bold :height 1.5))))
 '(info-node ((t (:foreground "yellow" :slant italic :weight bold))))
 '(info-title-4 ((t (:inherit variable-pitch :foreground "dark violet" :weight bold))))
 '(info-xref-visited ((t (:inherit (link-visited info-xref)))))
 '(link ((t (:foreground "DodgerBlue3" :underline t))))
 '(link-visited ((t (:inherit link :foreground "purple3"))))
 '(menu ((t (:foreground "red" :height 80))))
 '(minibuffer-prompt ((t (:foreground "LimeGreen"))))
 '(mode-line ((t (:background "grey" :foreground "black" :box (:line-width 2 :color "grey" :style released-button) :height 1.0 :family "Segoe UI"))))
 '(mode-line-buffer-id ((t (:slant italic :weight bold :height 0.9 :family "Segoe UI"))))
 '(mumamo-background-chunk-submode1 ((t (:background "Gray20"))))
 '(paren-face ((t (:foreground "dim gray"))))
 '(pp^L-highlight ((t (:foreground "#440044" :box (:line-width 1 :style pressed-button)))))
 '(py-XXX-tag-face ((t (:inherit font-lock-fic-face))))
 '(show-paren-mismatch ((t (:background "white" :foreground "red"))))
 '(slime-repl-inputed-output-face ((t (:foreground "maroon1"))))
 '(trailing-whitespace ((t (:background "grey50"))))
 '(w3m-anchor ((t (:inherit link :foreground "red"))) t)
 '(w3m-arrived-anchor ((t (:inherit link :foreground "magenta"))) t)
 '(w3m-current-anchor ((t (:underline t :weight bold))) t)
 '(w3m-header-line-location-title ((t (:background "Gray15" :foreground "dodger blue"))) t)
 '(w3m-image ((t (:inherit black-on-white))) t)
 '(woman-bold ((t (:inherit bold :foreground "deep sky blue"))) t))

(load (concat *my-dropbox-dir* "/emacs/load-all.el"))
